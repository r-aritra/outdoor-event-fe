/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Outdoor Event Booking API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from 'react-query';
import type { MutationFunction, UseMutationOptions } from 'react-query';
import type {
  DataAlreadyExists,
  DataNotFound,
  Login,
  LoginRequest,
  OTPExpired,
  OTPNotValid,
  OTPValidate,
  Ok,
  SendOTPRequest,
  UserCreated,
  UserRequest,
  ValidateOTPRequest,
  VerifyUserRequest,
} from './api.schemas';
import { axiosCustomInstance } from '../lib/axiosCustomInstance';
import type { ErrorType } from '../lib/axiosCustomInstance';

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Register a new user
 */
export const registerUser = (
  userRequest: UserRequest,
  options?: SecondParameter<typeof axiosCustomInstance>,
) => {
  return axiosCustomInstance<UserCreated>(
    {
      url: `/v1/api/register-user`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: userRequest,
    },
    options,
  );
};

export const getRegisterUserMutationOptions = <
  TError = ErrorType<DataAlreadyExists>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerUser>>,
    TError,
    { data: UserRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerUser>>,
  TError,
  { data: UserRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerUser>>,
    { data: UserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return registerUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerUser>>
>;
export type RegisterUserMutationBody = UserRequest;
export type RegisterUserMutationError = ErrorType<DataAlreadyExists>;

/**
 * @summary Register a new user
 */
export const useRegisterUser = <
  TError = ErrorType<DataAlreadyExists>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerUser>>,
    TError,
    { data: UserRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}) => {
  const mutationOptions = getRegisterUserMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Register a new vendor
 */
export const registerVendor = (
  userRequest: UserRequest,
  options?: SecondParameter<typeof axiosCustomInstance>,
) => {
  return axiosCustomInstance<UserCreated>(
    {
      url: `/v1/api/register-vendor`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: userRequest,
    },
    options,
  );
};

export const getRegisterVendorMutationOptions = <
  TError = ErrorType<DataAlreadyExists>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerVendor>>,
    TError,
    { data: UserRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerVendor>>,
  TError,
  { data: UserRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerVendor>>,
    { data: UserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return registerVendor(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterVendorMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerVendor>>
>;
export type RegisterVendorMutationBody = UserRequest;
export type RegisterVendorMutationError = ErrorType<DataAlreadyExists>;

/**
 * @summary Register a new vendor
 */
export const useRegisterVendor = <
  TError = ErrorType<DataAlreadyExists>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerVendor>>,
    TError,
    { data: UserRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}) => {
  const mutationOptions = getRegisterVendorMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Send OTP to email for verification
 */
export const sendOTP = (
  sendOTPRequest: SendOTPRequest,
  options?: SecondParameter<typeof axiosCustomInstance>,
) => {
  return axiosCustomInstance<Ok>(
    {
      url: `/v1/api/send-otp`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: sendOTPRequest,
    },
    options,
  );
};

export const getSendOTPMutationOptions = <
  TError = ErrorType<DataNotFound>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendOTP>>,
    TError,
    { data: SendOTPRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendOTP>>,
  TError,
  { data: SendOTPRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendOTP>>,
    { data: SendOTPRequest }
  > = (props) => {
    const { data } = props ?? {};

    return sendOTP(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendOTPMutationResult = NonNullable<Awaited<ReturnType<typeof sendOTP>>>;
export type SendOTPMutationBody = SendOTPRequest;
export type SendOTPMutationError = ErrorType<DataNotFound>;

/**
 * @summary Send OTP to email for verification
 */
export const useSendOTP = <
  TError = ErrorType<DataNotFound>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendOTP>>,
    TError,
    { data: SendOTPRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}) => {
  const mutationOptions = getSendOTPMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Validate OTP for email verification
 */
export const validateOTP = (
  validateOTPRequest: ValidateOTPRequest,
  options?: SecondParameter<typeof axiosCustomInstance>,
) => {
  return axiosCustomInstance<OTPValidate>(
    {
      url: `/v1/api/validate-otp`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: validateOTPRequest,
    },
    options,
  );
};

export const getValidateOTPMutationOptions = <
  TError = ErrorType<OTPNotValid | OTPExpired>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof validateOTP>>,
    TError,
    { data: ValidateOTPRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof validateOTP>>,
  TError,
  { data: ValidateOTPRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof validateOTP>>,
    { data: ValidateOTPRequest }
  > = (props) => {
    const { data } = props ?? {};

    return validateOTP(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ValidateOTPMutationResult = NonNullable<
  Awaited<ReturnType<typeof validateOTP>>
>;
export type ValidateOTPMutationBody = ValidateOTPRequest;
export type ValidateOTPMutationError = ErrorType<OTPNotValid | OTPExpired>;

/**
 * @summary Validate OTP for email verification
 */
export const useValidateOTP = <
  TError = ErrorType<OTPNotValid | OTPExpired>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof validateOTP>>,
    TError,
    { data: ValidateOTPRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}) => {
  const mutationOptions = getValidateOTPMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary User login
 */
export const login = (
  loginRequest: LoginRequest,
  options?: SecondParameter<typeof axiosCustomInstance>,
) => {
  return axiosCustomInstance<Login>(
    {
      url: `/v1/api/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginRequest,
    },
    options,
  );
};

export const getLoginMutationOptions = <
  TError = ErrorType<DataNotFound>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return login(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type LoginMutationBody = LoginRequest;
export type LoginMutationError = ErrorType<DataNotFound>;

/**
 * @summary User login
 */
export const useLogin = <TError = ErrorType<DataNotFound>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}) => {
  const mutationOptions = getLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Verify user email
 */
export const verifyUser = (
  verifyUserRequest: VerifyUserRequest,
  options?: SecondParameter<typeof axiosCustomInstance>,
) => {
  return axiosCustomInstance<Ok>(
    {
      url: `/v1/api/verify-user`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: verifyUserRequest,
    },
    options,
  );
};

export const getVerifyUserMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyUser>>,
    TError,
    { data: VerifyUserRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyUser>>,
  TError,
  { data: VerifyUserRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyUser>>,
    { data: VerifyUserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return verifyUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VerifyUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof verifyUser>>
>;
export type VerifyUserMutationBody = VerifyUserRequest;
export type VerifyUserMutationError = ErrorType<unknown>;

/**
 * @summary Verify user email
 */
export const useVerifyUser = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyUser>>,
    TError,
    { data: VerifyUserRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}) => {
  const mutationOptions = getVerifyUserMutationOptions(options);

  return useMutation(mutationOptions);
};
