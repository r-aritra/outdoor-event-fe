/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Outdoor Event Booking API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from 'react-query';
import type { MutationFunction, UseMutationOptions } from 'react-query';
import type {
  RegisterUser201,
  RegisterUser409,
  RegisterUserBody,
  RegisterVendor201,
  RegisterVendor409,
  RegisterVendorBody,
} from './api.schemas';
import { axiosCustomInstance } from '../lib/axiosCustomInstance';
import type { ErrorType } from '../lib/axiosCustomInstance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Register a new user
 */
export const registerUser = (
  registerUserBody: RegisterUserBody,
  options?: SecondParameter<typeof axiosCustomInstance>,
) => {
  return axiosCustomInstance<RegisterUser201>(
    {
      url: `/v1/api/register-user`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: registerUserBody,
    },
    options,
  );
};

export const getRegisterUserMutationOptions = <
  TError = ErrorType<RegisterUser409>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerUser>>,
    TError,
    { data: RegisterUserBody },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerUser>>,
  TError,
  { data: RegisterUserBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerUser>>,
    { data: RegisterUserBody }
  > = (props) => {
    const { data } = props ?? {};

    return registerUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerUser>>
>;
export type RegisterUserMutationBody = RegisterUserBody;
export type RegisterUserMutationError = ErrorType<RegisterUser409>;

/**
 * @summary Register a new user
 */
export const useRegisterUser = <
  TError = ErrorType<RegisterUser409>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerUser>>,
    TError,
    { data: RegisterUserBody },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}) => {
  const mutationOptions = getRegisterUserMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Register a new vendor
 */
export const registerVendor = (
  registerVendorBody: RegisterVendorBody,
  options?: SecondParameter<typeof axiosCustomInstance>,
) => {
  return axiosCustomInstance<RegisterVendor201>(
    {
      url: `/v1/api/register-vendor`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: registerVendorBody,
    },
    options,
  );
};

export const getRegisterVendorMutationOptions = <
  TError = ErrorType<RegisterVendor409>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerVendor>>,
    TError,
    { data: RegisterVendorBody },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerVendor>>,
  TError,
  { data: RegisterVendorBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerVendor>>,
    { data: RegisterVendorBody }
  > = (props) => {
    const { data } = props ?? {};

    return registerVendor(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterVendorMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerVendor>>
>;
export type RegisterVendorMutationBody = RegisterVendorBody;
export type RegisterVendorMutationError = ErrorType<RegisterVendor409>;

/**
 * @summary Register a new vendor
 */
export const useRegisterVendor = <
  TError = ErrorType<RegisterVendor409>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerVendor>>,
    TError,
    { data: RegisterVendorBody },
    TContext
  >;
  request?: SecondParameter<typeof axiosCustomInstance>;
}) => {
  const mutationOptions = getRegisterVendorMutationOptions(options);

  return useMutation(mutationOptions);
};
