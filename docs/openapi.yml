openapi: '3.0.0'
info:
  version: 1.0.0
  title: Outdoor Event Booking API
  license:
    name: MIT
servers:
  - url: http://localhost:3000
paths:
  /v1/api/register-user:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: User created successfully
        '409':
          description: Data already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 409
                  message:
                    type: string
                    example: Data already exist

  /v1/api/register-vendor:
    post:
      summary: Register a new vendor
      operationId: registerVendor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Vendor created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Vendor created successfully
        '409':
          description: Data already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 409
                  message:
                    type: string
                    example: Data already exist

  /v1/api/send-otp:
    post:
      summary: Send OTP to email for verification
      operationId: sendOTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                device_id:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: OK

  /v1/api/validate-otp:
    post:
      summary: Validate OTP for email verification
      operationId: validateOTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                otp:
                  type: string
                device_id:
                  type: string
      responses:
        200:
          description: OTP has been verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: OTP has been verified
        401:
          description: OTP is not valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: OTP is not valid
        410:
          description: OTP has been expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 410
                  message:
                    type: string
                    example: OTP has been expired

  /v1/api/login:
    post:
      summary: User login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                device_id:
                  type: string
                device_type:
                  type: string
      responses:
        200:
          description: User login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User login successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjc5LCJyb2xlcyI6InVzZXIiLCJpYXQiOjE3MDI1NDg5OTUsImV4cCI6MTcwMjU0OTg5NX0.I2Or2469XWBVJ7eSEpSxU0WyFIprG1Rsasasasasasa"
                      refresh_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjc5LCJyb2xlcyI6InVzZXIiLCJpYXQiOjE3MDI1NDg5OTUsImV4cCI6MTcwMzE1Mzc5NX0.vS-Y1Xa6-K1GVHW9HsiyJvPd86uaiG3wlMz4yhGA4Y8"
        404:
          description: Data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: Data not found

  /v1/api/verify-user:
    post:
      summary: Verify user email
      operationId: verifyUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: OK